#!/bin/bash
function _agcc-msg { echo "$@" >&2; }
function _agcc-dbg { [[ $AGCC_DBG ]] && echo "$@" >&2; }
function _agcc-guide { echo "" "$@" >&2; }

[[ ! $NDK ]] && for d in "$ANDROID_NDK_ROOT" "$ANDROID_NDK_HOME" "$NDK_ROOT" "$NDKROOT" "$ANDROID_NDK"; do
    [[ $d ]] && export NDK=$d && break
done
[[ ! $NDK ]] && for d in "$ANDROID_SDK_HOME" "$ANDROID_SDK_ROOT" "$ANDROID_SDK" "$ANDROID_HOME" "$ANDROID_ROOT"; do
    [[ $d ]] && export NDK=$d/ndk-bundle && break
done

ARCH=""; APIL=""; STL=""; FORCE="" CMD_MODE=""; CMD=""; HACK=""; HACK_LIST=()

while [[ $# -gt 0 ]]; do
    _agcc-dbg "\"$1\""
    case $1 in
    --arch) case $2 in arm|arm64|x86|x86_64|mips|mips64|i386|ia32|x64|mipsel|mipsel64) ARCH=$2; _agcc-dbg " ARCH=\"$2\""; shift;;
            ""|-*) _agcc-msg "arch not specified behind $1. It must be arm(default)|arm64|x86|x86_64|mips|mips64 or aliases i386|ia32|x64|mipsel|mipsel64"; exit 1;;
            *) _agcc-msg "\"$2\" is not a valid arch. It must be arm(default)|arm64|x86|x86_64|mips|mips64 or aliases i386|ia32|x64|mipsel|mipsel64"; exit 1;;
            esac
            ;;
    --api)  case $2 in min|max) APIL=$2; _agcc-dbg " APIL=\"$2\""; shift;;
            ""|-*) _agcc-msg "Android API level not specified behind $1. It must be min(default)|max|an integer"; exit 1;;
            *[!0-9]*) _agcc-msg "\"$2\" is not a valid Android API level. It must be min(default)|max|an integer"; exit 1;;
            *) APIL=$2; _agcc-dbg " APIL=\"$2\""; shift;;
            esac
            ;;
    --stl)  case $2 in gnustl|libc++|stlport) STL=$2; _agcc-dbg " STL=\"$2\""; shift;;
            ""|-*) _agcc-msg "C++ STL not specified behind $1. It must be gnustl(default)|libc++|stlport"; exit 1;;
            *) _agcc-msg "\"$2\" is not a valid C++ STL. It must be gnustl(default)|libc++|stlport"; exit 1;;
            esac
            ;;
    --hack) case $2 in
            ""|-*) _agcc-msg "hack options not found behind $1. Should be combination of available options(use --help-hack to show), joined by comma"; exit 1;;
            *)  HACK=$2; _agcc-dbg " HACK=\"$2\""; shift;;
            esac
            ;;
    --force)
            FORCE=$1; _agcc-dbg " ->FORCE"
            ;;
    arm|arm64|x86|x86_64|mips|mips64|i386|ia32|x64|mipsel|mipsel64)
            ARCH=$1; _agcc-dbg " ->ARCH"
            ;;
    min|max)
            APIL=$1; _agcc-dbg " ->APIL"
            ;;
    gnustl|libc++|stlport)
            STL=$1; _agcc-dbg " ->STL"
            ;;
    -c|-C)
            CMD_MODE=$1; _agcc-dbg " ->CMD_MODE"
            ;;
    -|--)
            _agcc-dbg " :end of options, next is CMD"
            shift; while [[ $# -gt 0 && ! $1 ]]; do shift; done
            [[ $1 == --help* ]] && break
            [[ $1 == -* ]] && { _agcc-msg "no valid external command after - or --"; exit 1; }
            CMD=${1:--}; _agcc-dbg " CMD=\"$CMD\""  #if not specified, treated as special command "-"
            shift
            break
            ;;
    --help*)
            break
            ;;
    --*)
            _agcc-msg "invalid option \"$1\", must be --arch|--api|--stl|--force|--hack"
            exit 1
            ;;
    -*)
            _agcc-msg "invalid command mode \"$1\", must be -c|-C"
            exit 1
            ;;
    "")
            _agcc-dbg " :skip isolated empty arg"
            ;;
    *)
            if [[ $1 != *[!0-9]* ]]; then #if an unsigned integer
                APIL=$1; _agcc-dbg " ->APIL"
            else
                CMD=$1; _agcc-dbg " ->CMD"
                shift
                break
            fi
            ;;
    esac

    shift
done

if [[ ! $CMD && $1 == --help* ]]; then
    if [[ $1 == --help ]]; then
        _agcc-msg "Use or create toolchain, set env and run command, or print \"the bin dir/\"."
        _agcc-msg "${0##*/} [OPTIONS] [CMD [ARGS...]]"
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "OPTIONS: Toolchain options, Command Mode, Misc options"
        _agcc-msg ""
        _agcc-msg "Toolchain options: specify which toolchain to use or create"
        _agcc-msg " [--arch] ARCH  Android architecture:"
        _agcc-msg "                {arm(default)|arm64|x86|x86_64|mips|mips64} or aliases:"
        _agcc-msg "                i386,ia32(=x86), x64(=x86_64), mipsel, mipsel64"
        _agcc-msg " [--api]  APIL  Android API level:"
        _agcc-msg "                {min(default)|max|an integer}"
        _agcc-msg " [--stl]  STL   C++ STL to use:"
        _agcc-msg "                {gnustl(default)|libc++|stlport}"
        _agcc-msg " --force        Delete existing toolchain dir then create"
        _agcc-msg ""
        _agcc-msg "Command Mode: Specify whether set \$PATH or \$CC... or \$CC_target..."
        _agcc-msg " omitted        This is the redirect mode."
        _agcc-msg "                Set \$PATH to redirect gcc... to the toolchain's gcc..."
        _agcc-msg "                e.g. export PATH=\".../std-toolchains/.../bin:\$PATH\""
        _agcc-msg " -c             Set \$CC,\$CXX,\$LD,\$AR,\$AS,\$RANLIB,\$STRIP,\$NM,\$LINK"
        _agcc-msg "                e.g. export CC=\".../std-toolchains/.../bin/gcc\""
        _agcc-msg " -C             Set \$CC_target,\$CXX_target,\$AR_target... ...\$LINK_target"
        _agcc-msg "                e.g. export CC_target=\".../std-toolchains/.../bin/gcc\""
        _agcc-msg ""
        _agcc-msg "Hack options:"
        _agcc-msg " --hack  HACK   Hack host(local) compiler commands. Should be combination of"
        _agcc-msg "                available options(use --help-hack to show), joined by comma."
        _agcc-msg "                For detail, refer to \"About Hack mode\" section."
        _agcc-msg ""
        _agcc-msg "Special options:"
        _agcc-msg " -              Means the end of options and next arg is CMD. But if nothing "
        _agcc-msg "                followed, then just print output the bin dir(slash ended)."
        _agcc-msg " --             Same as -"
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "CMD and ARGS: The external command to be run"
        _agcc-msg ""
        _agcc-msg " CMD            Any command. Default is /bin/bash."
        _agcc-msg "                The first non-option arg will be treated as CMD."
        _agcc-msg "                To avoid ambiguous with other option, place - or -- before CMD"
        _agcc-msg " ARGS...        The arguments for the CMD"
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "Output"
        _agcc-msg ""
        _agcc-msg "If end with - or --, then it output the bin dir(slash ended). e.g."
        _agcc-msg " \"\$NDK/std-toolchains/android-9-arm/bin/\""
        _agcc-msg ""
        _agcc-msg "Otherwise no output to stdout from the tool itself, but output some guide text"
        _agcc-msg "to stderr when run default command(bash) interactively."
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "About where the toolchain created"
        _agcc-msg ""
        _agcc-msg "This tool create dir in your NDK dir, in following format:"
        _agcc-msg " \"\$NDK/std-toolchains/android-APIL-ARCH[STL_TAG]\""
        _agcc-msg "This is not only for easy management, but also for keep some commands work."
        _agcc-msg " e.g. ndk-gdb, ndk-which... call neighbour files from \$NDK/SOME_DIR level."
        _agcc-msg " When in redirect mode, such commands is called into the toolchain's one."
        _agcc-msg " To keep them works same as previous, i have to choose such a dir hierarchy."
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "About env vars passed to CMD"
        _agcc-msg ""
        _agcc-msg "GYP_DEFINES will be set to \"host_os=<mac|linux>\" to specify host_os for gyp."
        _agcc-msg ""
        _agcc-msg "Following vars will be set for specified Command Mode, otherwise cleared."
        _agcc-msg " CC CXX LD AR AS RANLIB STRIP NM LINK CC_target CXX_target"
        _agcc-msg " LD_target AR_target AS_target RANLIB_target STRIP_target NM_target LINK_target"
        _agcc-msg ""
        _agcc-msg "BIN AGCC_BIN AGCC_HACK_DIR will be set for cleaner and as mnemonics."
        _agcc-msg ""
        _agcc-msg "PATH will be changed under certain conditions(redirect or hack)."
        _agcc-msg ""
        _agcc-msg "When called recursively, it will try to restore PATH first."
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "About redirect mode (Run command without -c or -C)"
        _agcc-msg ""
        _agcc-msg "In this mode, the following commands are redirected to the toolchain's one."
        _agcc-msg " cc(->gcc) gcc g++ c++ cpp clang clang++ yasm ld ar as ranlib strip ..."
        _agcc-msg " readelf objdump nm c++filt elfedit objcopy strings size ..."
        _agcc-msg " gdb addr2line gcov gprof gcore dwp ..."
        _agcc-msg " llvm-as llvm-dis llvm-link FileCheck ..."
        _agcc-msg " ndk-depends ndk-gdb ndk-which ndk-stack ..."
        _agcc-msg ""
        _agcc-msg "In this mode, the following commands come from toolchain are also available:"
        _agcc-msg " python make awk... But not the first choice in \$PATH"
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "About Hack mode (--hack)"
        _agcc-msg ""
        "$0" --help-hack
        _agcc-msg "--------------------------------------------------------------------------------"
        _agcc-msg "Examples"
        _agcc-msg ""
        _agcc-msg "#### print toolchain bin dir(slash ended)"
        _agcc-msg "android-gcc-toolchain -                                   #for arm(32bit)"
        _agcc-msg "android-gcc-toolchain arm64 -                             #for arm(64bit)"
        _agcc-msg ""
        _agcc-msg "#### compile a.c with android's gcc"
        _agcc-msg "android-gcc-toolchain arm64 gcc a.c"
        _agcc-msg ""
        _agcc-msg "#### start an interactive shell with gcc... ready"
        _agcc-msg "android-gcc-toolchain arm64                               #bash"
        _agcc-msg "android-gcc-toolchain arm64 zsh                           #zsh"
        _agcc-msg ""
        _agcc-msg "#### start an interactive bash with \$CC... predefined"
        _agcc-msg "android-gcc-toolchain arm64 -c"
        _agcc-msg ""
        _agcc-msg "#### start an interactive bash with \$CC_target... predefined"
        _agcc-msg "android-gcc-toolchain arm64 -C"
        _agcc-msg ""
        _agcc-msg "#### cross-compile ffmpeg with cross-prefix=\`android-gcc-toolchain arm64 -\`"
        _agcc-msg "./configure --enable-cross-compile --cross-prefix=\`android-gcc-toolchain arm64 -\` --arch=arm64 --target-os=linux"
        _agcc-msg ""
        _agcc-msg "#### cross-compile nodejs with \$CC_target... ready and some hacks (on Mac)"
        _agcc-msg "android-gcc-toolchain arm64 --hack ar-dual-os,gcc-no-librt -C <<< \"./configure --dest-cpu=arm64 --dest-os=android && make\""
        _agcc-msg ""
        _agcc-msg "#### use \`Here Document\` to feed commands, compared to above \`Here String\`."
        _agcc-msg "android-gcc-toolchain arm64 --hack ar-dual-os,gcc-no-librt -C <<EOF"
        _agcc-msg "\"./configure --dest-cpu=arm64 --dest-os=android && make\""
        _agcc-msg "EOF"
        _agcc-msg ""

    elif [[ $1 == --help-hack ]]; then
    
        _agcc-msg "Available hack options:"
        thisDir=${0%/*}; if target=`readlink "${0}"`; then if [[ $target == /* ]]; then thisDir=${target%/*}; elif [[ $target == */* ]]; then thisDir+=/${target%/*}; fi; fi
        _agcc-dbg "thisDir: \"$thisDir\""
        hackDir=$thisDir/hack
        for d1 in "$hackDir"/*; do
            [[ $d1 == *\** ]] && break
            msg=""
            for d2 in "$d1"/*; do
                [[ $d2 == *\** ]] && break
                exeName=${d2##*/}  #gcc-no-lrt/gcc -> gcc
                if [[ -x $d2/$exeName ]] || chmod a+x "$d2/$exeName" 2>/dev/null; then
                    msg+=" ${d2##$hackDir/}"
                fi
            done
            if [[ $msg ]]; then
                anyOK=YES
                _agcc-msg " ${d1##$hackDir/}"
                _agcc-msg " $msg"
            fi
        done
    fi
    
    exit 1
fi

if [[ $AGCC_DBG ]]; then
    _agcc-dbg "args {"
    _agcc-dbg " ARCH     \"$ARCH\""
    _agcc-dbg " APIL     \"$APIL\""
    _agcc-dbg " STL      \"$STL\""
    _agcc-dbg " FORCE    \"$FORCE\""
    _agcc-dbg " HACK     \"$HACK\""
    _agcc-dbg " CMD_MODE \"$CMD_MODE\""
    _agcc-dbg " CMD      \"$CMD\""
    _agcc-dbg " #ARGS    $#"
    _agcc-dbg "}"
fi

################################################################################
#check arch and cross-compile executable's name prefix
case ${ARCH:=arm} in
    arm)    ARCH_PREFIX=arm-linux-androideabi- ;;
    arm64)  ARCH_PREFIX=aarch64-linux-android- ;;
    x86|i386|ia32)   ARCH=x86;    ARCH_PREFIX=i686-linux-android- ;;
    x86_64|x64)      ARCH=x86_64; ARCH_PREFIX=x86_64-linux-android- ;;
    mips|mipsel)     ARCH=mips;   ARCH_PREFIX=mipsel-linux-android- ;;
    mips64|mipsel64) ARCH=mips64; ARCH_PREFIX=mips64el-linux-android- ;;
    *) _agcc-msg "\"$ARCH\" is not a valid arch. It must be arm(default)|arm64|x86|x86_64|mips|mips64 or aliases i386|ia32|x64|mipsel|mipsel64"; exit 1 ;;
esac

################################################################################
#check Android API level
case ${APIL:=min} in
    min|max)
        [[ ! $NDK ]] && { _agcc-msg "\$NDK is empty. Can not guess from \$ANDROID_NDK_ROOT, \$ANDROID_SDK_HOME,... Please run: export NDK=__the_top_dir_of_installed_NDK__"; exit 1; }
        dirPrefix=$NDK/platforms/android-
        dirSuffix=/arch-$ARCH
        dirList=() #save ordered dir list

        #glob dir list, add to dirList if globed.
        tmpList=("$dirPrefix"?$dirSuffix)
        [[ $tmpList[0] != *\?* ]] && dirList=("${dirList[@]}" "${tmpList[@]}")
        tmpList=("$dirPrefix"??$dirSuffix)
        [[ $tmpList[0] != *\?* ]] && dirList=("${dirList[@]}" "${tmpList[@]}")

        #get first or last dir name, e.x. ...android-9/arch-... or ...android-24/arch-...
        if [[ $APIL == min ]]; then
            APIL=${dirList[0]}
        else
            APIL=${dirList[${#dirList[@]}-1]}
        fi

        #remove prefix and suffix to get pure number
        APIL=${APIL#$dirPrefix}
        APIL=${APIL%$dirSuffix}

        [[ ! $APIL ]] && { _agcc-msg "$dirPrefix*$dirSuffix not found"; exit 1; }
        ;;
    *[!0-9]*)
        _agcc-msg "\"$APIL\" is not a valid Android API level. It must be min(default)|max|an integer"; exit 1
        ;;
esac

################################################################################
#check C++ STL
case ${STL:=gnustl} in
    gnustl ) STL_TAG="" ;;
    libc++ ) STL_TAG=-stlc++ ;;
    stlport) STL_TAG=-stlport ;;
    *) _agcc-msg "\"$STL\" is not a valid C++ STL. It must be gnustl(default)|libc++|stlport"; exit 1 ;;
esac

################################################################################
#check HACK mode if to run command

if [[ $HACK ]]; then

    #ugly: treat -C anywhere as CMD_MODE -C, so avoid following incredible validation error
    [[ ! $CMD_MODE ]] && for arg in "$@"; do [[ $arg == -C ]] && CMD_MODE=-C && break; done
    [[ $CMD_MODE != -C ]] && { _agcc-msg "--host option must be used with -C option"; exit 1; }

    hoList=(${HACK//,/ }) #replace comma with space, then turn to a array
    [[ ! $hoList[0] ]] && { _agcc-msg "\"$HACK\" is not a valid hack option. Should be combination of available options(use --help-hack to show), joined by comma"; exit 1; }

    thisDir=${0%/*}; if target=`readlink "${0}"`; then if [[ $target == /* ]]; then thisDir=${target%/*}; elif [[ $target == */* ]]; then thisDir+=/${target%/*}; fi; fi
    _agcc-dbg "thisDir: \"$thisDir\""
    hackDir=$thisDir/hack
    function already_checked { local ho; for ho in "${HACK_LIST[@]}"; do [[ $1 == $ho ]] && return 0; done; return 1; }

    for ho in "${hoList[@]}"; do
        [[ $ho == /* || $ho == */ || $ho == */*/* || ! -d $hackDir/$ho ]] && { _agcc-msg "\"$ho\" is not a valid hack option. Should be combination of available options(use --help-hack to show), joined by comma"; exit 1; }

        if [[ $ho == */* ]]; then #?* means at least 1 char
            dirList=("$hackDir/$ho")
        else
            dirList=("$hackDir/$ho"/*)
            [[ $dirList[0] == *\** ]] && { _agcc-msg "hack option \"$ho\" not available. Should be combination of available options(use --help-hack to show), joined by comma"; exit 1; }
        fi

        ok=""
        for d2 in "${dirList[@]}"; do
            exeName=${d2##*/}  #gcc-no-lrt/gcc -> gcc
            if [[ -x $d2/$exeName ]] || chmod a+x "$d2/$exeName" 2>/dev/null; then
                ok=YES
                already_checked "$d2" || HACK_LIST[${#HACK_LIST[@]}]=$d2
            fi
        done

        [[ ! $ok ]] && { _agcc-msg "hack option \"$ho\" not available. Should be combination of available options(use --help-hack to show), joined by comma"; exit 1; }
    done

    #remove hackDir/ from every item
    HACK_LIST=("${HACK_LIST[@]##$hackDir/}")
fi

################################################################################
if [[ $AGCC_DBG ]]; then
    _agcc-dbg "args {"
    _agcc-dbg " ARCH     \"$ARCH\""
    _agcc-dbg " APIL     \"$APIL\""
    _agcc-dbg " STL      \"$STL\""
    _agcc-dbg " FORCE    \"$FORCE\""
    _agcc-dbg " HACK     \"$HACK\""
    qo=(); for o in "${HACK_LIST[@]}"; do qo[${#qo[@]}]=\"$o\"; done
    _agcc-dbg " HACK_LIST    (${qo[@]})"
    _agcc-dbg " CMD_MODE \"$CMD_MODE\""
    _agcc-dbg " CMD      \"$CMD\""
    _agcc-dbg " #ARGS    $#"
    _agcc-dbg "}"
fi

################################################################################
#create or check standalone toolchain
[[ ! $NDK ]] && { _agcc-msg "\$NDK is empty. Can not guess from \$ANDROID_NDK_ROOT, \$ANDROID_SDK_HOME,... Please run: export NDK=__the_top_dir_of_installed_NDK__"; exit 1; }
NAME=android-$APIL-$ARCH$STL_TAG
DIR=$NDK/std-toolchains/$NAME
BIN=$DIR/bin

if [[ ! -d $DIR || $FORCE ]]; then
    if [[ -d $DIR || $FORCE ]]; then
        _agcc-msg "Make \$NDK/std-toolchains/$NAME forcibly"
    else
        _agcc-msg "Make \$NDK/std-toolchains/$NAME because it does not exists..."
    fi

    if ! PYTHON=`which python`; then
        PYTHON=("$NDK"/prebuilt/*/bin/python)
        [[ $PYTHON == "$NDK/prebuilt/*/bin/python" ]] && { _agcc-msg "python not found in \$PATH and \$NDK/prebuilt/*/bin"; exit 1; }
    fi
    _agcc-dbg "use \"$PYTHON\""
    "$PYTHON" "$NDK/build/tools/make_standalone_toolchain.py" --arch "$ARCH" --api "$APIL" --stl "$STL" --install-dir "$DIR" $FORCE

    if [[ -e "$BIN/$ARCH_PREFIX"gcc ]]; then
        _agcc-msg "Done"
        _agcc-msg ""
    else
        _agcc-msg "Failed to create NDK standalone toolchain."
        _agcc-msg ""
        exit 1
    fi
else
    ls "$BIN/$ARCH_PREFIX"gcc > /dev/null || exit 1
fi

#do not want toolchain's make awk python take precedence of existing one. So move it to ../tools
[[ -f "$BIN"/idle ]] && mv "$BIN"/make "$BIN"/python* "$BIN"/pydoc "$BIN"/awk "$BIN"/smtpd.py "$BIN"/2to3 "$BIN"/idle "$BIN"/../tools/ 2>/dev/null

################################################################################
#make some symbol-link such as gcc @-> arm-linux-androideabi-gcc
#also link cc @-> gcc
pushd "$BIN" > /dev/null
    for f in $ARCH_PREFIX*; do s=${f/$ARCH_PREFIX}; [[ ! -e $s && -x $f ]] && ln -s "$f" "$s"; done
    [[ ! -e cc ]] && ln -s "$ARCH_PREFIX"gcc cc
popd > /dev/null

################################################################################
#if end with dash, then just print bin path(slash ended)
if [[ $CMD == - ]]; then
    echo "$BIN/"
    exit 0
fi

################################################################################
#otherwise, prepare env then run command








################################################################################
#check interactive bash just for show guide and prompt
GUIDE=""
[[ ! $CMD && -t 0 && -t 2 ]] && GUIDE=YES
_agcc-dbg "GUIDE: ${GUIDE:-NO}"

################################################################################
#remove previous bin path from $PATH
if [[ $AGCC_BIN ]]; then

    [[ $GUIDE ]] && oldStr=$PATH

    d=$AGCC_BIN
    PATH=${PATH//:$d:/:}    #replace :dir: with :
    PATH=${PATH#$d:}        #remove   dir: from head
    PATH=${PATH%:$d}        #remove  :dir  from tail

    if [[ $GUIDE && $oldStr != $PATH ]]; then
        [[ $GUIDE != havePrintedAGCC_BIN ]] && GUIDE=havePrintedAGCC_BIN && \
        _agcc-guide "Undo \$PATH changes from previous toolchain with \$AGCC_BIN" && _agcc-guide "\"${AGCC_BIN/#$NDK/\$NDK}\""
        _agcc-guide "Removed previous \$AGCC_BIN from \$PATH."
    fi

    [[ $GUIDE ]] && oldStr=$PATH

    d=$AGCC_BIN/../tools
    PATH=${PATH//:$d:/:}    #replace :dir: with :
    PATH=${PATH#$d:}        #remove   dir: from head
    PATH=${PATH%:$d}        #remove  :dir  from tail

    if [[ $GUIDE && $oldStr != $PATH ]]; then
        [[ $GUIDE != havePrintedAGCC_BIN ]] && GUIDE=havePrintedAGCC_BIN && \
        _agcc-guide "Undo \$PATH changes from previous toolchain with \$AGCC_BIN" && _agcc-guide "\"${AGCC_BIN/#$NDK/\$NDK}\""
        _agcc-guide "Removed previous \$AGCC_BIN/../tools from \$PATH."
    fi
fi
unset AGCC_BIN

################################################################################
#remove previous hack dir from $PATH
if [[ $AGCC_HACK_DIR ]]; then

    for d in "$AGCC_HACK_DIR"/*/*; do
        [[ $d == *\** ]] && break; #means dir not expanded

        [[ $GUIDE ]] && oldStr=$PATH

        PATH=${PATH//:$d:/:}    #replace :dir: with :
        PATH=${PATH#$d:}        #remove   dir: from head
        PATH=${PATH%:$d}        #remove  :dir  from tail

        if [[ $GUIDE && $oldStr != $PATH ]]; then
            [[ $GUIDE != havePrintedAGCC_HACK_DIR ]] && GUIDE=havePrintedAGCC_HACK_DIR && \
            _agcc-guide "Undo hack from previous toolchain with \$AGCC_HACK_DIR" && _agcc-guide "\"$AGCC_HACK_DIR\""
            _agcc-guide "[-]Removed ${d/#$AGCC_HACK_DIR/\$AGCC_HACK_DIR} from \$PATH."
        fi
    done
fi
unset AGCC_HACK_DIR

################################################################################
#clear some maybe-inherited var
unset CC CXX LD AR AS RANLIB STRIP NM LINK
unset CC_target CXX_target LD_target AR_target AS_target RANLIB_target STRIP_target NM_target LINK_target
unset PS1
unset GYP_DEFINES

################################################################################
#save bin dir for cleaner and as mnemonics
export AGCC_BIN=$BIN
export BIN

if [[ $GUIDE ]]; then
    tmpStr="$NAME toolchain is ready! The bin dir(\$BIN,\$AGCC_BIN):"
    _agcc-guide "${tmpStr//?/-}"  #replace each char with -
    _agcc-guide "$tmpStr"
    _agcc-guide "\"\$NDK/std-toolchains/$NAME/bin\""
    _agcc-guide ""
fi

################################################################################

#append $BIN/../tools to $PATH so python make awk can be used if no existing one
export PATH=$PATH:$BIN/../tools

#set gyp host_os to explicitly set it so correctly choose source files
case $OSTYPE in
    darwin*) export GYP_DEFINES="host_os=mac" ;;
    linux*)  export GYP_DEFINES="host_os=linux" ;;
    *)       _agcc-dbg "unsupported OSTYPE \"$OSTYPE\", so not set GYP_DEFINES=\"host_os=?\"" ;;
esac

case $CMD_MODE in
################################################################################
"")  #$PATH mode(redirect mode)
    export PATH=$BIN:$PATH

    if [[ $GUIDE ]]; then
        _agcc-guide "Prepended to \$PATH. So you can use these commands (First choice):"
        _agcc-guide " cc(->gcc) gcc g++ c++ cpp clang clang++ yasm ld ar as ranlib strip ..."
        _agcc-guide " readelf objdump nm c++filt elfedit objcopy strings size ..."
        _agcc-guide " gdb addr2line gcov gprof gcore dwp yasm ..."
        _agcc-guide " llvm-as llvm-dis llvm-link FileCheck ..."
        _agcc-guide " ndk-depends ndk-gdb ndk-which ndk-stack ..."
        _agcc-guide "As a fallback, ../tools(python make awk...) are appended to \$PATH."
        _agcc-guide ""

        #change prompt
        export PS1="[$NAME] ";
    fi
    ;;
################################################################################
-c) #$CC mode
    export CC=$BIN/gcc
    export CXX=$BIN/g++
    export LD=$BIN/ld
    export AR=$BIN/ar
    export AS=$BIN/as
    export RANLIB=$BIN/ranlib
    export STRIP=$BIN/strip
    export NM=$BIN/nm
    export LINK=$BIN/g++

    if [[ $GUIDE ]]; then
        _agcc-guide "Following env vars have been exported:"
        _agcc-guide " export CC=\$BIN/gcc"
        _agcc-guide " export CXX=\$BIN/g++"
        _agcc-guide " export LD=\$BIN/ld"
        _agcc-guide " export AR=\$BIN/ar"
        _agcc-guide " export AS=\$BIN/as"
        _agcc-guide " export RANLIB=\$BIN/ranlib"
        _agcc-guide " export STRIP=\$BIN/strip"
        _agcc-guide " export NM=\$BIN/nm"
        _agcc-guide " export LINK=\$BIN/g++"
        _agcc-guide ""

        #change prompt
        export PS1="[$NAME \\\$CC] ";
    fi
    ;;
################################################################################
-C) #$CC_target mode
    export CC_target=$BIN/gcc
    export CXX_target=$BIN/g++
    export LD_target=$BIN/ld
    export AR_target=$BIN/ar
    export AS_target=$BIN/as
    export RANLIB_target=$BIN/ranlib
    export STRIP_target=$BIN/strip
    export NM_target=$BIN/nm
    export LINK_target=$BIN/g++

    if [[ $GUIDE ]]; then
        _agcc-guide "Following env vars have been exported:"
        _agcc-guide " export CC_target=\$BIN/gcc"
        _agcc-guide " export CXX_target=\$BIN/g++"
        _agcc-guide " export LD_target=\$BIN/ld"
        _agcc-guide " export AR_target=\$BIN/ar"
        _agcc-guide " export AS_target=\$BIN/as"
        _agcc-guide " export RANLIB_target=\$BIN/ranlib"
        _agcc-guide " export STRIP_target=\$BIN/strip"
        _agcc-guide " export NM_target=\$BIN/nm"
        _agcc-guide " export LINK_target=\$BIN/g++"
        _agcc-guide ""

        #change prompt
        export PS1="[$NAME \\\$CC_target] "
    fi

    ################################################################################
    #do some optional hack for compiler
    if [[ ${#HACK_LIST[@]} -gt 0 ]]; then
        #save hack dir for cleaner
        export AGCC_HACK_DIR=$hackDir

        [[ $GUIDE ]] && _agcc-guide "Hacking host(local) compiler commands with \$AGCC_HACK_DIR" && _agcc-guide "\"$hackDir\""
        ((i=${#HACK_LIST[@]}-1))
        while ((i>=0)); do
            ho=${HACK_LIST[$i]}; exeName=${ho##*/}
            export PATH=$hackDir/$ho:$PATH
            [[ $GUIDE ]] && _agcc-guide "[+]\$AGCC_HACK_DIR/$ho/$exeName supersede $exeName in \$PATH"
            ((i--))
        done
        [[ $GUIDE ]] && _agcc-guide ""

        #change prompt, replace "]" with "+]"
        [[ $GUIDE ]] && export PS1="${PS1/#]/+]}"
    fi #end of HACK_LIST
esac

################################################################################
#finally, call CMD

if [[ $GUIDE ]]; then
    #forcibly set my prompt ($PS1) via an on-fly init-file yet simulate interactive non-login bash
    exec /bin/bash --init-file <(
        echo '[[ -f /etc/bash.bashrc ]] && source /etc/bash.bashrc'
        echo '[[ -f ~/.bashrc ]] && source ~/.bashrc'
        echo "PS1='$PS1'"
    )
else
    if [[ $CMD ]]; then
        exec "$CMD" "$@"
    else
        exec /bin/bash
    fi
fi
